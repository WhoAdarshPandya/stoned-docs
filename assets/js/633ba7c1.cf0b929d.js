(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{80:function(t,n,o){"use strict";o.r(n),o.d(n,"frontMatter",(function(){return c})),o.d(n,"metadata",(function(){return p})),o.d(n,"toc",(function(){return l})),o.d(n,"App",(function(){return d})),o.d(n,"default",(function(){return m}));var e=o(3),i=o(0),a=o.n(i),s=o(102),r=o(104);o(56);const c={sidebar_position:14},p={unversionedId:"components/Dialog",id:"components/Dialog",isDocsHomePage:!1,title:"Dialog",description:"export const App = () => {",source:"@site/docs/components/Dialog.mdx",sourceDirName:"components",slug:"/components/Dialog",permalink:"/stoned-docs/docs/components/Dialog",editUrl:"https://github.com/whoadarshpandya/stoned-docs/tree/main/docs/components/Dialog.mdx",version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Toast",permalink:"/stoned-docs/docs/components/Toast"},next:{title:"Appbar",permalink:"/stoned-docs/docs/components/AppBar"}},l=[],d=()=>{const[t,n]=Object(i.useState)(!1);return Object(s.b)(a.a.Fragment,null,Object(s.b)(r.e,{variant:"contained",onClick:()=>{n(!0)},color:"primary",mdxType:"Button"},"open dialog"),t&&Object(s.b)(r.j,{onBackdropClick:()=>{n(!1)},setAutoHide:!1,positiveButtonText:"okay",negativeButtonText:"cancel",buttonKind:"textColorPrimary",onPositiveButtonClick:()=>{n(!1)},onNegativeButtonClick:()=>{alert("cancel pressed")},mdxType:"Dialog"}))},u={toc:l,App:d};function m({components:t,...n}){return Object(s.b)("wrapper",Object(e.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)(d,{mdxType:"App"}),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/App.js"',title:'"src/App.js"'},'import { useState } from "react";\nimport { Dialog, Button } from "stoned";\nimport "stoned/dist/index.css";\n\nconst App = () => {\n  const [showDialog, setShowDialog] = useState(false);\n  return (\n    <React.Fragment>\n      <Button\n        variant="contained"\n        onClick={() => {\n          setShowDialog(true);\n        }}\n        color="primary"\n      >\n        open dialog\n      </Button>\n      {showDialog && (\n        <Dialog\n          onBackdropClick={() => {\n            setShowDialog(false);\n          }}\n          setAutoHide={false}\n          positiveButtonText="okay"\n          negativeButtonText="cancel"\n          buttonKind="textColorPrimary"\n          onPositiveButtonClick={() => {\n            setShowDialog(false);\n          }}\n          onNegativeButtonClick={() => {\n            alert("cancel pressed");\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n')))}m.isMDXComponent=!0}}]);