(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{84:function(t,n,o){"use strict";o.r(n),o.d(n,"frontMatter",(function(){return i})),o.d(n,"metadata",(function(){return c})),o.d(n,"toc",(function(){return l})),o.d(n,"App",(function(){return u})),o.d(n,"SuccessToast",(function(){return d})),o.d(n,"ErrorToast",(function(){return p})),o.d(n,"InfoToast",(function(){return m})),o.d(n,"WarningToast",(function(){return h})),o.d(n,"ActionToast",(function(){return b})),o.d(n,"default",(function(){return g}));var e=o(3),s=o(0),a=o(102),r=o(104);o(56);const i={sidebar_position:13},c={unversionedId:"components/Toast",id:"components/Toast",isDocsHomePage:!1,title:"Toast",description:"Standard Toast",source:"@site/docs/components/Toast.mdx",sourceDirName:"components",slug:"/components/Toast",permalink:"/stoned-docs/docs/components/Toast",editUrl:"https://github.com/whoadarshpandya/stoned-docs/tree/main/docs/components/Toast.mdx",version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Rating",permalink:"/stoned-docs/docs/components/Rating"},next:{title:"Dialog",permalink:"/stoned-docs/docs/components/Dialog"}},l=[{value:"Standard Toast",id:"standard-toast",children:[]},{value:"Success Toast",id:"success-toast",children:[]},{value:"Error Toast",id:"error-toast",children:[]},{value:"Info Toast",id:"info-toast",children:[]},{value:"Warning Toast",id:"warning-toast",children:[]},{value:"Toast With Action",id:"toast-with-action",children:[]}],u=()=>{const[t,n]=Object(s.useState)(!1);return Object(a.b)("div",null,Object(a.b)(r.e,{onClick:()=>{n((t=>!t))},mdxType:"Button"},"show normal toast"),t&&Object(a.b)("span",{className:"z-plus"},Object(a.b)(r.v,{onClick:t=>{console.log(t)},onFinish:()=>{n(!1)},renderCloseButton:!0,onCloseClick:()=>{n(!1)},autoHideDuration:500,renderActionButton:!1,actionButtonName:"close",onButtonClick:()=>{n(!1)},message:"the standard toast",variant:"standard",anchorOrigin:{vertical:"top",horizontal:"left"},mdxType:"Toast"})))},d=()=>{const[t,n]=Object(s.useState)(!1);return Object(a.b)("div",null,Object(a.b)(r.e,{onClick:()=>{n((t=>!t))},mdxType:"Button"},"show success toast"),t&&Object(a.b)("span",{className:"z-plus"},Object(a.b)(r.v,{onClick:t=>{console.log(t)},onFinish:()=>{n(!1)},renderCloseButton:!0,onCloseClick:()=>{n(!1)},autoHideDuration:5,renderActionButton:!1,actionButtonName:"close",onButtonClick:()=>{n(!1)},message:"the success toast",variant:"success",anchorOrigin:{vertical:"top",horizontal:"right"},mdxType:"Toast"})))},p=()=>{const[t,n]=Object(s.useState)(!1);return Object(a.b)("div",null,Object(a.b)(r.e,{onClick:()=>{n((t=>!t))},mdxType:"Button"},"show error toast"),t&&Object(a.b)("span",{className:"z-plus"},Object(a.b)(r.v,{onClick:t=>{console.log(t)},onFinish:()=>{n(!1)},renderCloseButton:!0,onCloseClick:()=>{n(!1)},autoHideDuration:5,renderActionButton:!1,actionButtonName:"close",onButtonClick:()=>{n(!1)},message:"the error toast",variant:"error",anchorOrigin:{vertical:"top",horizontal:"center"},mdxType:"Toast"})))},m=()=>{const[t,n]=Object(s.useState)(!1);return Object(a.b)("div",null,Object(a.b)(r.e,{onClick:()=>{n((t=>!t))},mdxType:"Button"},"show info toast"),t&&Object(a.b)("span",{className:"z-plus"},Object(a.b)(r.v,{onClick:t=>{console.log(t)},onFinish:()=>{n(!1)},renderCloseButton:!0,onCloseClick:()=>{n(!1)},autoHideDuration:5,renderActionButton:!1,actionButtonName:"close",onButtonClick:()=>{n(!1)},message:"the info toast",variant:"info",anchorOrigin:{vertical:"bottom",horizontal:"center"},mdxType:"Toast"})))},h=()=>{const[t,n]=Object(s.useState)(!1);return Object(a.b)("div",null,Object(a.b)(r.e,{onClick:()=>{n((t=>!t))},mdxType:"Button"},"show warning toast"),t&&Object(a.b)("span",{className:"z-plus"},Object(a.b)(r.v,{onClick:t=>{console.log(t)},onFinish:()=>{n(!1)},renderCloseButton:!0,onCloseClick:()=>{n(!1)},autoHideDuration:5,renderActionButton:!1,actionButtonName:"close",onButtonClick:()=>{n(!1)},message:"the warning toast",variant:"warning",anchorOrigin:{vertical:"bottom",horizontal:"right"},mdxType:"Toast"})))},b=()=>{const[t,n]=Object(s.useState)(!1);return Object(a.b)("div",null,Object(a.b)(r.e,{onClick:()=>{n((t=>!t))},mdxType:"Button"},"show button with action"),t&&Object(a.b)("span",{className:"z-plus"},Object(a.b)(r.v,{onClick:t=>{console.log(t)},onFinish:()=>{n(!1)},renderCloseButton:!1,onCloseClick:()=>{n(!1)},autoHideDuration:5,renderActionButton:!0,actionButtonName:"close",onButtonClick:()=>{n(!1)},message:"toast with button",variant:"standard",anchorOrigin:{vertical:"bottom",horizontal:"left"},mdxType:"Toast"})))},T={toc:l,App:u,SuccessToast:d,ErrorToast:p,InfoToast:m,WarningToast:h,ActionToast:b};function g({components:t,...n}){return Object(a.b)("wrapper",Object(e.a)({},T,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("br",null),Object(a.b)("h2",{id:"standard-toast"},"Standard Toast"),Object(a.b)(u,{mdxType:"App"}),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/App.js"',title:'"src/App.js"'},'import { useState } from "react";\nimport { Toast, Button } from "stoned";\nimport "stoned/dist/index.css";\n\nconst App = () => {\n  const [showToast, setShowToast] = useState(false);\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => {\n          setShowToast((prev) => !prev);\n        }}\n      >\n        show normal toast\n      </Button>\n      {showToast && (\n        <Toast\n          onClick={(e) => {\n            console.log(e);\n          }}\n          onFinish={() => {\n            setShowToast(false);\n          }}\n          renderCloseButton={true}\n          onCloseClick={() => {\n            setShowToast(false);\n          }}\n          autoHideDuration={5}\n          renderActionButton={false}\n          actionButtonName="close"\n          onButtonClick={() => {\n            setShowToast(false);\n          }}\n          message="the standard toast"\n          variant="standard"\n          anchorOrigin={{ vertical: "top", horizontal: "left" }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n')),Object(a.b)("h2",{id:"success-toast"},"Success Toast"),Object(a.b)(d,{mdxType:"SuccessToast"}),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/App.js"',title:'"src/App.js"'},'import { useState } from "react";\nimport { Toast, Button } from "stoned";\nimport "stoned/dist/index.css";\n\nconst App = () => {\n  const [showToast, setShowToast] = useState(false);\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => {\n          setShowToast((prev) => !prev);\n        }}\n      >\n        show success toast\n      </Button>\n      {showToast && (\n        <Toast\n          onClick={(e) => {\n            console.log(e);\n          }}\n          onFinish={() => {\n            setShowToast(false);\n          }}\n          renderCloseButton={true}\n          onCloseClick={() => {\n            setShowToast(false);\n          }}\n          autoHideDuration={5}\n          renderActionButton={false}\n          actionButtonName="close"\n          onButtonClick={() => {\n            setShowToast(false);\n          }}\n          message="the success toast"\n          variant="success"\n          anchorOrigin={{ vertical: "top", horizontal: "right" }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n')),Object(a.b)("h2",{id:"error-toast"},"Error Toast"),Object(a.b)(p,{mdxType:"ErrorToast"}),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/App.js"',title:'"src/App.js"'},'import { useState } from "react";\nimport { Toast, Button } from "stoned";\nimport "stoned/dist/index.css";\n\nconst App = () => {\n  const [showToast, setShowToast] = useState(false);\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => {\n          setShowToast((prev) => !prev);\n        }}\n      >\n        show error toast\n      </Button>\n      {showToast && (\n        <Toast\n          onClick={(e) => {\n            console.log(e);\n          }}\n          onFinish={() => {\n            setShowToast(false);\n          }}\n          renderCloseButton={true}\n          onCloseClick={() => {\n            setShowToast(false);\n          }}\n          autoHideDuration={5}\n          renderActionButton={false}\n          actionButtonName="close"\n          onButtonClick={() => {\n            setShowToast(false);\n          }}\n          message="the error toast"\n          variant="error"\n          anchorOrigin={{ vertical: "top", horizontal: "center" }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n')),Object(a.b)("h2",{id:"info-toast"},"Info Toast"),Object(a.b)(m,{mdxType:"InfoToast"}),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/App.js"',title:'"src/App.js"'},'import { useState } from "react";\nimport { Toast, Button } from "stoned";\nimport "stoned/dist/index.css";\n\nconst App = () => {\n  const [showToast, setShowToast] = useState(false);\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => {\n          setShowToast((prev) => !prev);\n        }}\n      >\n        show info toast\n      </Button>\n      {showToast && (\n        <Toast\n          onClick={(e) => {\n            console.log(e);\n          }}\n          onFinish={() => {\n            setShowToast(false);\n          }}\n          renderCloseButton={true}\n          onCloseClick={() => {\n            setShowToast(false);\n          }}\n          autoHideDuration={5}\n          renderActionButton={false}\n          actionButtonName="close"\n          onButtonClick={() => {\n            setShowToast(false);\n          }}\n          message="the info toast"\n          variant="info"\n          anchorOrigin={{ vertical: "bottom", horizontal: "center" }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n')),Object(a.b)("h2",{id:"warning-toast"},"Warning Toast"),Object(a.b)(h,{mdxType:"WarningToast"}),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/App.js"',title:'"src/App.js"'},'import { useState } from "react";\nimport { Toast, Button } from "stoned";\nimport "stoned/dist/index.css";\n\nconst App = () => {\n  const [showToast, setShowToast] = useState(false);\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => {\n          setShowToast((prev) => !prev);\n        }}\n      >\n        show warning toast\n      </Button>\n      {showToast && (\n        <Toast\n          onClick={(e) => {\n            console.log(e);\n          }}\n          onFinish={() => {\n            setShowToast(false);\n          }}\n          renderCloseButton={true}\n          onCloseClick={() => {\n            setShowToast(false);\n          }}\n          autoHideDuration={5}\n          renderActionButton={false}\n          actionButtonName="close"\n          onButtonClick={() => {\n            setShowToast(false);\n          }}\n          message="the warning toast"\n          variant="warning"\n          anchorOrigin={{ vertical: "bottom", horizontal: "right" }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n')),Object(a.b)("h2",{id:"toast-with-action"},"Toast With Action"),Object(a.b)(b,{mdxType:"ActionToast"}),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/App.js"',title:'"src/App.js"'},'import { useState } from "react";\nimport { Toast, Button } from "stoned";\nimport "stoned/dist/index.css";\n\nconst App = () => {\n  const [showToast, setShowToast] = useState(false);\n  return (\n    <React.Fragment>\n      <Button\n        onClick={() => {\n          setShowToast((prev) => !prev);\n        }}\n      >\n        show toast with button\n      </Button>\n      {showToast && (\n        <Toast\n          onClick={(e) => {\n            console.log(e);\n          }}\n          onFinish={() => {\n            setShowToast5(false);\n          }}\n          renderCloseButton={false}\n          onCloseClick={() => {\n            setShowToast5(false);\n          }}\n          autoHideDuration={5}\n          renderActionButton={true}\n          actionButtonName="close"\n          onButtonClick={() => {\n            setShowToast5(false);\n          }}\n          message="toast with button"\n          variant="standard"\n          anchorOrigin={{ vertical: "bottom", horizontal: "left" }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n')))}g.isMDXComponent=!0}}]);